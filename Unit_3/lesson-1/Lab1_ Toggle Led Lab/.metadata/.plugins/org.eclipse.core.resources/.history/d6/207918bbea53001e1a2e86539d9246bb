/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

typedef volatile unsigned int vuint32;

#define RCC_base 0x40021000
#define RCC__APB2ENR 0x18
#define portA_base 0x40010800
#define PortA_CHR 0x04
#define PortA_ODR 0x04

typedef union {
	vuint32 allfield;
	struct{
		vuint32 reserved :2;
		vuint32 pin_2:1;
	}pin;
}RCC_APB2ENR_t;
volatile RCC_APB2ENR_t* RCC_APB2ENR=(volatile RCC_APB2ENR_t* )(RCC_base+RCC__APB2ENR);		// pointer >> RCC_APB2ENR

typedef union {
	vuint32 allfield;
	struct{
		vuint32 reserved :13;
		vuint32 pin_13:1;
	}pin;
}PortA_R_ODR_t;
volatile PortA_R_ODR_t * PortA_R_ODR =(volatile PortA_R_ODR_t *)(portA_base+PortA_ODR);  	// pointer >> PortA_R_ODR

typedef union {
	vuint32 allfield;
	struct{
		vuint32 reserved :20;
		vuint32 pins_20_24:4;
	}pins;
}PortA_R_CHR_t;
volatile PortA_R_CHR_t* PortA_R_CHR = (volatile PortA_R_CHR_t*)(portA_base+Port_A_CHR);	// pointer >> PortA_R_CHR

int main(void)
{
	RCC_APB2ENR->pin.pin_2=1;		//port A clock enabled
	PortA_R_CHR->allfield=0;
	PortA_R_CHR->pins.pins_20_24=2;		// Set the mode
	while(1){
		PortA_R_ODR->pin.pin_13=1;		//Led On
		for(vuint32 i =0;i<5000;i++);	// DELAY
		PortA_R_ODR->pin.pin_13=0;		//Led Off
		for(vuint32 i =0;i<5000;i++);	// DELAY
	}


}
